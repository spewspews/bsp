.TH FIBHEAP 3
.SH NAME
fibinit
fibcreate
fibfree
fibinsert
fibdeletemin
fibdecreasekey
fibdelete \- Fibonacci heap routines
.SH SYNOPSIS
.ta 0.75i 1.5i 2.25i 3i 3.75i 4.5i
.\" .ta 0.7i +0.7i +0.7i +0.7i +0.7i +0.7i +0.7i
.EX
typedef struct Fibheap Fibheap;
typedef struct Fibnode Fibnode;
typedef int (*Fibcmp)(Fibnode*, Fibnode*);

struct Fibheap {
	Fibnode *min;
	Fibcmp cmp;
	Fibnode **arr;
	int arrlen;
};

struct Fibnode {
	Fibnode *p, *c, *next, *prev;
	int rank;
	char mark;
};

Fibheap* fibinit(Fibheap *heap, Fibcmp cmp);
Fibheap *fibcreate(Fibcmp cmp);
Fibheap *fibfree(Fibheap *heap);
void     fibinsert(Fibheap *heap, Fibnode *node);
int      fibdeletemin(Fibheap *node);
void     fibdecreasekey(Fibheap *heap, Fibnode *node);
int      fibdelete(Fibheap *heap, Fibnode *node);

.EE
.SH DESCRIPTION
These routines allow creation and maintenance of in-memory priority
queues implemented by a Fibonacci heap.
.PP
The intended usage is for a parent structure to contain the
.B Fibnode
structure as its first member along with other data to be
stored in the tree. A pointer to the Fibnode member is passed
to the library API functions. The API functions then pass
these pointers to the comparison function and store them
in the heap. See the example below for details on
how this works in practice.
.PP
A heap is initialized by calling
.I fibheapinit
with an empty tree and a comparison function as arguments.
The comparison function receives two pointers to Fibnodes stored
in the heap and should return an integer less than, equal to, or
greater than 0 as the first is
respectively ordered less than,
equal to, or greater than the second.
.I Fibheapinit
allocates memory used for maintenance of the heap
and
.I fibfree
must be called to free the memory.
A new empty heap can be created by calling
.I fibcreate
with a comparison function as an argument. This function
calls
.I malloc
(see
.IR malloc (3))
to create the tree and must be freed after
.I fibfree
has been called.
.PP
The minimum element in the heap is stored in the
.B min
member of the
.B Fibheap
struct. If
.B min
is
.B NULL
then the heap is empty.
.I Fibdeletemin
removes the minimum element from the heap and queues
the next item in the
.B min
field. This may require a memory allocation and will return
.B -1
in case of failure.
Keys in a node can be changed as long as the new value
is not greater than the old value. In that case
.I Fibdecreasekey
must be called to
re-establish heap order on the
.BR heap .
Any node can be removed from the heap by calling
.IR fibdelete .
In the case where the
.B node
is the minimum node, allocation may occur and the function
returns
.B -1
in case of failure.
.SH EXAMPLES
Typical usage is to embed the
.B Fibnode
structure as the first member of a structure
that holds data to be stored in the tree.
Then pass a pointer to this member to the library
functions.
.IP
.EX
.sy sed 's;\\\\;\\\\\\\\;' fibexample.c > /tmp/example
.so /tmp/example
.sy rm /tmp/example
.EE
.SH SEE ALSO
.nf
Michael L. Fredman and Robert Endre Tarjan. 1987. Fibonacci heaps and their uses in improved network optimization algorithms. J. ACM 34, 3 (July 1987), 596-615. DOI=http://dx.doi.org/10.1145/28869.28874
.SH DIAGNOSTICS
.IR fibinit ,
.IR fibdeletemin ,
and
.I fibdelete
returns
.B NULL
on error.
